// ********RoostGPT********
/*
Application Test generated by RoostGPT for test Csharp-Application using AI Type Open AI and AI Model gpt-4o


*/

// ********RoostGPT********
using NUnit.Framework;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Testing;

namespace WebApplication.Tests
{
    public class ApplicationTests
    {
        private readonly HttpClient _client;

        public ApplicationTests()
        {
            var appFactory = new WebApplicationFactory<Program>();
            _client = appFactory.CreateClient();
        }

        [Test]
        public async Task Get_Manage_ChangePassword_ReturnsOk()
        {
            var response = await _client.GetAsync("/Manage/ChangePassword");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Post_Manage_ChangePassword_ReturnsRedirect()
        {
            var content = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("OldPassword", "oldPass123"),
                new KeyValuePair<string, string>("NewPassword", "newPass123")
            });

            var response = await _client.PostAsync("/Manage/ChangePassword", content);
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Get_Manage_SetPassword_ReturnsOk()
        {
            var response = await _client.GetAsync("/Manage/SetPassword");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Post_Manage_SetPassword_ReturnsRedirect()
        {
            var content = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("NewPassword", "newPass123")
            });

            var response = await _client.PostAsync("/Manage/SetPassword", content);
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Get_Manage_Users_ReturnsOk()
        {
            var response = await _client.GetAsync("/Manage/Users");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Get_Order_Index_ReturnsOk()
        {
            var response = await _client.GetAsync("/Order/Index");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Get_Order_Details_ReturnsOk()
        {
            var response = await _client.GetAsync("/Order/Details/1");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Get_User_IsAuthenticated_ReturnsOk()
        {
            var response = await _client.GetAsync("/User/IsAuthenticated");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Get_User_Logout_ReturnsOk()
        {
            var response = await _client.GetAsync("/User/Logout");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Get_HomePageHealthCheck_ReturnsOk()
        {
            var response = await _client.GetAsync("/home_page_health_check");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }

        [Test]
        public async Task Get_ApiHealthCheck_ReturnsOk()
        {
            var response = await _client.GetAsync("/api_health_check");
            response.EnsureSuccessStatusCode();
            Assert.AreEqual("OK", response.StatusCode.ToString());
        }
    }
}

