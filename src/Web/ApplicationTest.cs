// ********RoostGPT********
/*
Application Test generated by RoostGPT for test Csharp-Application using AI Type Open AI and AI Model gpt-4o


*/

// ********RoostGPT********
using NUnit.Framework;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.eShopWeb.Web;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System.Net;

namespace Web.Tests
{
    public class ApplicationTest
    {
        private WebApplicationFactory<Program> _factory;
        private HttpClient _client;

        [SetUp]
        public void Setup()
        {
            _factory = new WebApplicationFactory<Program>()
                .WithWebHostBuilder(builder =>
                {
                    builder.ConfigureServices(services =>
                    {
                        // Configure test services if needed
                    });
                });

            _client = _factory.CreateClient();
        }

        [TearDown]
        public void TearDown()
        {
            _client.Dispose();
            _factory.Dispose();
        }

        [Test]
        public async Task ChangePassword_Get_ShouldReturnView()
        {
            var response = await _client.GetAsync("/Manage/ChangePassword");

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            var content = await response.Content.ReadAsStringAsync();
            Assert.IsTrue(content.Contains("Change Password")); 
        }

        [Test]
        public async Task ChangePassword_Post_ShouldRedirectOnSuccess()
        {
            var formData = new MultipartFormDataContent();
            formData.Add(new StringContent("oldPassword123"), "OldPassword");
            formData.Add(new StringContent("newPassword123"), "NewPassword");

            var response = await _client.PostAsync("/Manage/ChangePassword", formData);

            Assert.AreEqual(HttpStatusCode.Redirect, response.StatusCode);
            Assert.AreEqual("/Manage/ChangePassword", response.Headers.Location.ToString());
        }

        [Test]
        public async Task SetPassword_Get_ShouldReturnView()
        {
            var response = await _client.GetAsync("/Manage/SetPassword");

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            var content = await response.Content.ReadAsStringAsync();
            Assert.IsTrue(content.Contains("Set Password"));
        }

        [Test]
        public async Task SetPassword_Post_ShouldRedirectOnSuccess()
        {
            var formData = new MultipartFormDataContent();
            formData.Add(new StringContent("newPassword123"), "NewPassword");

            var response = await _client.PostAsync("/Manage/SetPassword", formData);

            Assert.AreEqual(HttpStatusCode.Redirect, response.StatusCode);
            Assert.AreEqual("/Manage/SetPassword", response.Headers.Location.ToString());
       }

        [Test]
        public async Task GetMyOrders_ShouldReturnOrders()
        {
            var response = await _client.GetAsync("/Order/MyOrders");

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            var content = await response.Content.ReadAsStringAsync();
            Assert.IsTrue(content.Contains("Orders")); // Assuming response contains the word "Orders" for successful fetch 
        }

        [Test]
        public async Task GetUser_ShouldReturnUserInfo()
        {
            var response = await _client.GetAsync("/User");

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            var content = await response.Content.ReadAsStringAsync();
            Assert.IsTrue(content.Contains("UserInfo")); // Assuming response contains the User Information
        }

        [Test]
        public async Task Logout_ShouldReturnOk()
        {
            var response = await _client.GetAsync("/User/Logout");

            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            var content = await response.Content.ReadAsStringAsync();
            Assert.IsTrue(content.Contains("Logged out"));
       }
    }
}

